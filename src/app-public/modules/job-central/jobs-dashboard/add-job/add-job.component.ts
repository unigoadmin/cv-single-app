import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, OnInit, ViewChild } from '@angular/core';
import { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { stagger80ms } from 'src/@cv/animations/stagger.animation';
import { fadeInUp400ms } from 'src/@cv/animations/fade-in-up.animation';
import { scaleIn400ms } from 'src/@cv/animations/scale-in.animation';
import { fadeInRight400ms } from 'src/@cv/animations/fade-in-right.animation';
import { SubmissionAccount } from 'src/@shared/core/ats/models/submission'; 
import { AccountTypeNameEnum, AccountTypesEnum } from 'src/@cv/models/accounttypeenum';
import { AccountMaster } from 'src/@shared/models/common/accountmaster';
import { AccountTypes } from 'src/static-data/accounttypes';
import { SelectItem } from 'src/@shared/models/common/selectitem';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { Keywords, LoginUser } from 'src/@shared/models';
import { AlertService, AuthenticationService, EventEmitterService } from 'src/@shared/services';
import { isNullOrUndefined } from 'src/@shared/services/helpers';
import { SubmissionService } from 'src/@shared/core/ats/http/submissions.service';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { MatSliderChange } from '@angular/material/slider';
import { MarketingDashboardService } from 'src/@shared/core/ats/http/marketingdashboard.service';
import { JobMaster } from '../../core/model/jobmaster';
import { JobCentralService } from '../../core/http/job-central.service';
import { EmitterService } from 'src/@cv/services/emitter.service';
import { MatOption } from '@angular/material/core';
import { MatSelect } from '@angular/material/select';
import moment from 'moment';
import { SubUsers } from 'src/@shared/models/common/subusers';
import { QuillViewComponent } from 'ngx-quill/lib/quill-view.component';
import { MatTabChangeEvent } from '@angular/material/tabs';
import { IconService } from 'src/@shared/services/icon.service';
import { RequisitionService } from '../../core/http/requisitions.service';
import { Requisitions } from '../../core/model/requisitions';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { WorkStatusService } from 'src/@shared/http/work-status.service';


@Component({
  selector: 'cv-add-job',
  templateUrl: './add-job.component.html',
  styleUrls: ['./add-job.component.scss'],
  providers: [AccountTypes, MarketingDashboardService],
  changeDetection: ChangeDetectionStrategy.OnPush,
  animations: [
    stagger80ms,
    fadeInUp400ms,
    scaleIn400ms,
    fadeInRight400ms
  ],
})
export class AddJobComponent implements OnInit {
  visible: boolean = true;
  selectable: boolean = true;
  removable: boolean = true;
  addOnBlur: boolean = false;
  readonly separatorKeysCodes = [ENTER, COMMA] as const;

  EndClientControl: FormControl = new FormControl();
  EndClientOptions: Observable<AccountMaster[]>;
  EndClientList: AccountMaster[] = [];

  enumAccountTypes: typeof AccountTypesEnum = AccountTypesEnum;
  searchCtrl = new FormControl();
  loginUser: LoginUser;
  thirdTypeList: SelectItem[] = [];
  endClientAccount: SubmissionAccount = new SubmissionAccount();
  SelectedType: any = 3;SalaryType: any = 1;salaryRangeType: number = 1;
  workStatusFields: SelectItem[] = [];
  
  accountMaster: AccountMaster[] = [];
  EndClient: number;

  static id = 100;
  allSelected = false;
  public QuickSubmitForm: FormGroup;
  mode: 'create' | 'update' = 'create';
  
  @ViewChild('fruitInput') fruitInput: ElementRef;
  @ViewChild('wpselect') wpselect: MatSelect;
  enumAccountTypeName: typeof AccountTypeNameEnum = AccountTypeNameEnum;
  job: JobMaster = new JobMaster();
  thirdPartyAddLayer: SubmissionAccount[] = [];
  thirdPartycontractType: boolean = true;
  directcontractType: boolean = false;
  internalcontractType: boolean = false;
  ThirdPartyEndClient: any;
  SelectedPrimarySkills: string[] = [];
  KeywordCtrl = new FormControl();
  AllKeywords: string[] = [];
  filteredKeywords: Observable<any[]>;
  keywords: Keywords[];
  workStatuFields: SelectItem[] = [];
  RemoteType: boolean = false;
  OnSightType: boolean = false;
  BillingType: number = 1;
  jobWorkStatus: string[] = [];
  JobPostingDate: any;
  IsOnsite: boolean = false;
  IsJobIdAutoGenerated: boolean = false;
  IsLocation: boolean = false;
  SelectedJobMode: string = "Remote";
  salesTeam: SubUsers[];
  AssigneName: string = null;
  filteredOptions: Observable<any[]>;
  IsJobIdReadonly:boolean=false;
  IsPageDirty:boolean=false;
  isApplicantsView:boolean = false;
  isSummary:boolean=true;
  IsNotes:boolean=false;
  MultipleRequisitions: Requisitions[];
  MappingList : any[] = [];
  ReviweAssigneeCtrl: FormControl = new FormControl('', [Validators.required, this.validateOption.bind(this)]);
  @ViewChild('editorText') editorText!: QuillViewComponent;
  LocationRequired:boolean=false;
  IsC2C:boolean=false;IsW2:boolean=false;IsCTH:boolean=false;
  selectedCheckboxes= [];
  public validation_msgs = {
    'contactAutocompleteControl': [
      { type: 'invalidAutocompleteObject', message: 'Contact name not recognized. Click one of the autocomplete options.' },
      { type: 'required', message: 'Contact is required.' }
    ],
    'phoneLabelAutocompleteControl': [
      { type: 'invalidAutocompleteString', message: 'User name not recognized. Click one of the autocomplete options.' },
      { type: 'required', message: 'User is required.' }
    ]
  }
  constructor(@Inject(MAT_DIALOG_DATA) public InputData: any,
    private dialogRef: MatDialogRef<AddJobComponent>,
    private _service: SubmissionService,
    private fb: FormBuilder,
    private cdr: ChangeDetectorRef,
    private accountTypes: AccountTypes,
    private _alertService: AlertService,
    private _authService: AuthenticationService,
    private _serviceMarketing: MarketingDashboardService,
    private jobService: JobCentralService,
    private requisitonService: RequisitionService,
    public iconService: IconService,
    private workStatusService: WorkStatusService
  ) {
    this.accountMaster = [];
    this.job = new JobMaster();
    this.thirdTypeList = [];
    this.thirdTypeList = this.accountTypes.ThirdPartyClient;
    this.QuickSubmitForm = this.fb.group({
      SelectedType: ['', Validators.required],
      JobTitle: ['', Validators.required],
      UniqueJobId: [''],
      JobIdAutoGenerated: [''],
      JobDescription: ['', Validators.required],
      BillRate: [''],
      JobDurtionMonths: ['',Validators.max(24)],
      RelocationType: [''],
      JobTypeID: ['',this.checkJobTypeId()],
      JobCategory: [''],
      BillingType: [''],
      thirdEndClientControl: [''],
      whf: [''],
      SalaryType: [''],
      salaryRangeType: [''],
      MinSalary: [''],
      MaxSalary: [''],
      JobStatus: [''],
      JobPostingDate: [''],
      jobpoc: [''],
      SelectedJobMode: ['Remote', Validators.required],
      VisaSponsor:[],
      Location: ['', this.checkLocationRequired()],
      C2C:[''],W2:[''],CTH:[''],
      JcType:['',this.checkJobType_Contract()],
      PrimarySkills:['',Validators.required],
    });

    this.filteredKeywords = this.KeywordCtrl.valueChanges.pipe(
      map((item: string | null) => item ? this._filter(item) : this.AllKeywords.slice()));

    this.job.BillingType = 1;
    this.MultipleRequisitions = this.InputData.responses;
    this.IsNotes = false;
  }
  autoTicks = false;
  disabled = false;
  invert = false;
  max = 10000;
  min = 1000;
  showTicks = false;
  step = 1;
  thumbLabel = false;
  value = 0;
  vertical = false;

  modules = {
    formula: false,
    toolbar: [      
    ['bold', 'italic', 'underline', 'strike'],
    ['code-block'],
    [{ list: 'ordered' }, { list: 'bullet' }],
    [{ header: [1, 2, 3, 4, 5, 6, false] }]
    ]
  };

  get tickInterval(): number | 'auto' {
    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;
  }
  set tickInterval(value) {
    this._tickInterval = coerceNumberProperty(value);
  }
  private _tickInterval = 1;

  onSliderChange(event: MatSliderChange) {
    this.value = event.value;
  }
  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.AllKeywords.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);
  }
  ngOnInit() {
    this.loginUser = this._authService.getLoginUser();
    if (this.loginUser) {
      this.GetBenchSubUsers();
      this.workStatusService.getWorkStatusFields(this.loginUser.Company.Id).subscribe(data => {
        this.workStatuFields = data;
      });
      if (this.InputData.mode === "Edit Job") {
        this.getJobById();
      } else {debugger;
        this.OnRequirementChange(3);
        this.JobModeChange(this.SelectedJobMode);
      }
    }
  }
  getJobById() {
    this.jobService.GetBenchJobById(this.loginUser.Company.Id, this.InputData.Id).subscribe(response => {
      if (response.IsError) {
        this._alertService.error(response.ErrorMessage);
      } else {
        this.IsJobIdReadonly = true;
        this.job = response.Data;

        if (this.job.Location == "-Not Specified-") {
          this.job.Location = "";
          this.IsLocation = false;
        }

        if(!this.job.JobLocationType){
          this.job.JobLocationType=this.SelectedJobMode;
        }
        else{
          this.SelectedJobMode = this.job.JobLocationType;
        }

        // this.SelectedType = Number(this.job.JobCategory);
        // this.OnRequirementChange(this.SelectedType);
        // //this.editorText.content = this.job.JobDescription;

        if (!isNullOrUndefined(this.job.JobCategory)) {debugger;
          this.SelectedType = Number(this.job.JobCategory);
          if (this.SelectedType == 2) {
            if (!isNullOrUndefined(this.job.JobTypeID)) {
              this.QuickSubmitForm.get('JobTypeID').setValue(this.job.JobTypeID);
            }
            this.QuickSubmitForm.get('JcType').clearValidators();
            this.QuickSubmitForm.get('JcType').updateValueAndValidity();
          }
          else if (this.SelectedType == 3) {
            if (!isNullOrUndefined(this.job.ContractType)) {
              const values = this.job.ContractType.split(',');
              values.forEach(value => {
                if (value == "C2C"){
                  this.IsC2C = true;
                  this.selectedCheckboxes.push('C2C');
                }
                if (value == "CTH") {
                  this.IsCTH = true;
                  this.selectedCheckboxes.push('CTH');
                }
                if (value == "W2") {
                  this.IsW2 = true;
                  this.selectedCheckboxes.push('W2');
                }
              });
              this.QuickSubmitForm.get('JcType').setValue(values);
            }
            this.QuickSubmitForm.get('JobTypeID').clearValidators();
            this.QuickSubmitForm.get('JobTypeID').updateValueAndValidity();
          }
          this.checkJobType_Contract();
          this.checkJobTypeId();
        }
        else {
          this.SelectedType = 3;
        }

        if (!isNullOrUndefined(this.job.SkillSet)) {
          this.SelectedPrimarySkills = this.job.SkillSet.split(",");
          this.QuickSubmitForm.get('PrimarySkills').setValue(this.SelectedPrimarySkills);
        }
        
        if (!isNullOrUndefined(this.job.JobPostingDate)) {
          this.JobPostingDate = new Date(moment(this.job.JobPostingDate).format("MM-DD-YYYY"));
        }

        if(!isNullOrUndefined(this.job.SalaryType)){
          this.SalaryType = this.job.SalaryType;
          this.onSalaryTypeChange(this.SalaryType);
        }

        if(!isNullOrUndefined(this.job.salaryRangeType)){
          this.salaryRangeType = this.job.salaryRangeType;
          this.OnsalaryRangeTypeChanged();
        }
        
        if (!isNullOrUndefined(this.job.WorkStatus) && this.job.WorkStatus.length > 0) {
          this.jobWorkStatus = this.job.WorkStatus.split(",")
        }

        if(!isNullOrUndefined(this.job.POC)){
          let selectedUser = this.salesTeam.find(x => x.UserId == this.job.POC);
          if (selectedUser != null) {
            this.AssigneName = selectedUser.FullName;
          }
        }

        if (this.job.AccountMasters.length > 0) {
          this.job.AccountMasters.forEach(account => {
            this.EditAccount(account, account.AccountTypeID);
            if (account.AccountTypeID != 1) {
              let type = {
                label: account.AccountTypeName
              }
              //this.addLayerSelection(type);
              // if (account.AccountTypeID === 4) {
              //   this.OnRequirementChange(this.SelectedType);
              // }
            }
          });
        }
        console.log(this.SelectedType);
      }
      if (!this.cdr["destroyed"]) {
        this.cdr.detectChanges();
      }
    }, error => {
      this._alertService.error(error);
      if (!this.cdr["destroyed"]) {
        this.cdr.detectChanges();
      }
    })
  }
  EditAccount(account, type) {
    switch (type) {
      case 1:
        this.endClientAccount = this.EditAccountandContact(account);
        break;
    }
  }

  EditAccountandContact(account) {
    let ClientAccount: SubmissionAccount = new SubmissionAccount();
    ClientAccount.AccountLevel = "job"
    ClientAccount.AccountName = account.AccountName;
    ClientAccount.AccountID = account.AccountID;
    ClientAccount.Employer = false;
    ClientAccount.AccountTypeID = account.AccountTypeID;
    ClientAccount.AccountTypeName = account.AccountTypeName;
    ClientAccount.CompanyID = account.CompanyID;
    ClientAccount.CreatedBy = account.CreatedBy;
    ClientAccount.CreatedDate = account.CreatedDate;
    if (account.AccountContacts != null && account.AccountContacts.ContactID > 0) {
      ClientAccount.AccountContacts = account.AccountContacts;
    } else {
      const contact = {
        ContactID: 0,
        AccountID: 0,
        FirstName: null,
        MiddleName: null,
        LastName: null,
        Email: null,
        Phonenumber: null,
        PhoneExt: null,
        CreatedBy: this.loginUser.UserId,
        CreatedDate: new Date(),
        UpdatedBy: null,
        UpdatedDate: null,
      }
      ClientAccount.AccountContacts = contact;
    }
    return ClientAccount;
  }
  GetKeywords() {
    this._serviceMarketing.getKeywords(this.loginUser.Company.Id)
      .subscribe(
        keyword => {
          this.keywords = keyword;
          this.keywords.forEach(item => {
            this.AllKeywords.push(item.KeywordsText)
          });
        },
        error => alert(error));
  }
  GetAccounts() {
    this._service.GetAccounts(this.loginUser.Company.Id).subscribe(response => {
      this.GetKeywords();
      this.accountMaster = response.Data;
      this.PepareAccountTypeAccountList();
    })
  }

  PepareAccountTypeAccountList() {
    this.EndClientList = this.accountMaster.filter(x => x.AccountTypeID === this.enumAccountTypes.EndClient);
    this.EndClientOptions = this.EndClientControl.valueChanges.pipe(startWith(''), map(val => this.thirdecfilter(val)));
  }
  thirdecfilter(val: string) {
    return this.EndClientList.filter(option => option.AccountName.toLowerCase().indexOf(val.toLowerCase()) === 0);
  }

  OnRequirementChange(value) {
    this.job.JobCategory = value;
    this.SelectedType = value;
    if(value==2){
      this.selectedCheckboxes=[];
      this.QuickSubmitForm.get("JobTypeID").setValidators(Validators.required);
      this.QuickSubmitForm.get("JobTypeID").updateValueAndValidity();
      this.QuickSubmitForm.get('JcType').setValue(null);
      this.QuickSubmitForm.get('JcType').clearValidators();
      this.QuickSubmitForm.get("JcType").updateValueAndValidity();
      this.QuickSubmitForm.get('JobDurtionMonths').clearValidators();
      this.QuickSubmitForm.get("JobDurtionMonths").updateValueAndValidity();
      this.IsC2C=false;this.IsCTH=false;this.IsW2=false;
    }else if(value == 3){
      this.job.JobTypeID=null;
      this.QuickSubmitForm.get('JobTypeID').setValue(null);
      this.QuickSubmitForm.get("JobTypeID").clearValidators();
      this.QuickSubmitForm.get("JobTypeID").updateValueAndValidity();
      this.QuickSubmitForm.get('JcType').setValidators(Validators.required);
      this.QuickSubmitForm.get("JcType").updateValueAndValidity();
      this.QuickSubmitForm.get('JobDurtionMonths').setValidators(Validators.required);
      this.QuickSubmitForm.get("JobDurtionMonths").updateValueAndValidity();

    }

    if (!this.cdr["destroyed"]) {
      this.cdr.detectChanges();
    }
  }

 
  SeelectedAccount(event, type) {
    this.IsPageDirty=true;
    switch (type) {
      case 'end':
        const end = this.EndClientList.find(x => x.AccountID == event.option.id);
        this.endClientAccount = this.GetAccountandContact(end);
        break;
    }
  }
  GetAccountandContact(account) {
    let ClientAccount: SubmissionAccount = new SubmissionAccount();
    ClientAccount.AccountLevel = "job"
    ClientAccount.AccountName = account.AccountName;
    ClientAccount.AccountID = account.AccountID;
    ClientAccount.Employer = false;
    ClientAccount.AccountTypeID = account.AccountTypeID;
    ClientAccount.AccountTypeName = account.AccountTypeName;
    ClientAccount.CompanyID = account.CompanyID;
    ClientAccount.CreatedBy = account.CreatedBy;
    ClientAccount.CreatedDate = account.CreatedDate;
    if (account.AccountTypeID != 1 && account.AccountContacts.length > 0) {
      ClientAccount.AccountContacts = account.AccountContacts[0];
    } else {
      const contact = {
        ContactID: 0,
        AccountID: 0,
        FirstName: null,
        MiddleName: null,
        LastName: null,
        Email: null,
        Phonenumber: null,
        PhoneExt: null,
        CreatedBy: this.loginUser.UserId,
        CreatedDate: new Date(),
        UpdatedBy: null,
        UpdatedDate: null,
      }
      ClientAccount.AccountContacts = contact;
    }
    return ClientAccount;
  }


  save() {
    this.job.MinExperience = Number(this.job.MinExperience);
    this.job.MaxExperience = Number(this.job.MaxExperience);
    this.job.SalaryType = this.SalaryType;
    this.job.salaryRangeType = this.salaryRangeType;
    this.job.ContractType = this.selectedCheckboxes.join(',');
    this.job.JobCategory = this.SelectedType;

    if(this.SelectedType==3){
      this.job.JobTypeID = 2; //contract
    }

    if (this.JobPostingDate) {
      let sdate: any;
      sdate = moment(this.JobPostingDate).format("YYYY-MM-DDTHH:mm:ss.ms");
      this.job.JobPostingDate = sdate;
    }

    this.job.AccountMasters = [];

    if (this.InputData.mode === "Edit Job") {
      this.job.UpdatedDate = new Date();
    } else {
      this.job.CompanyName = this.loginUser.Company.Name;
      this.job.CompanyId = this.loginUser.Company.Id;
      this.job.CreatedBy = this.loginUser.UserId;
      this.job.CreatedDate = new Date();
    }
    if (this.SelectedPrimarySkills.length > 0) {
      this.job.SkillSet = this.SelectedPrimarySkills.join(",");
    }
    if (this.jobWorkStatus.length > 0) {
      this.job.WorkStatus = this.jobWorkStatus.join(",")
    }

    if (this.endClientAccount.AccountID > 0) { //end client
      this.endClientAccount.MappingStatus = true;
      const account = this.DeepCopyForObject(this.endClientAccount);
      this.job.AccountMasters.push(account)
    } else if (this.endClientAccount.AccountID == 0 && !isNullOrUndefined(this.endClientAccount.AccountName) && this.endClientAccount.AccountName != '') {
      const prearedacnt = this.prepareAccount(this.enumAccountTypes.EndClient, this.endClientAccount)
      let account = this.DeepCopyForObject(prearedacnt);
      this.job.AccountMasters.push(account)
    }

    this.job.AccountMasters = this.checkAccountName(this.job.AccountMasters);
    
    this.jobService.AddJobMaster(this.job).subscribe(response => {
      if (response.IsError) {
        this._alertService.error(response.ErrorMessage);
      } else {
        //this.dialogRef.close(true);
        this.dialogRef.close(response.Data);
        if (this.InputData.mode === "Edit Job") {
          this._alertService.success('Job updated successfully');
          EmitterService.get("editJob").emit(true);
        }
        else {
          var NewJobId = response.Data;
          this._alertService.success('Job added successfully');
          if (this.InputData.RequisitionId != 0 && this.InputData.model == 'single')
            this.MapJobToRequistion(NewJobId);
          else if (this.InputData.model == 'multiple')
            this.UpdateMultipleResponseMapping(NewJobId);
        }
      }
    }, error => {
      this._alertService.error(error);
    })
  }

  prepareAccount(AccountType, acunt: SubmissionAccount) {
    let Account: SubmissionAccount = new SubmissionAccount();
    Account = acunt;
    Account.CreatedBy = this.loginUser.UserId;
    Account.CreatedDate = new Date();
    Account.AccountTypeID = AccountType;
    Account.Employer = false;
    Account.AccountLevel = "job";
    Account.MappingStatus = true;
    // Account.AccountTypeName = this.accountTypes.ThirdPartyClientList.find(x => x.value == AccountType).label;

    Account.AccountContacts.CreatedBy = this.loginUser.UserId;
    Account.AccountContacts.CreatedDate = new Date();
    Account.AccountContacts.FirstName = acunt.AccountContacts.FirstName;
    Account.AccountContacts.LastName = acunt.AccountContacts.LastName;
    Account.AccountContacts.Email = acunt.AccountContacts.Email;
    Account.AccountContacts.Phonenumber = acunt.AccountContacts.Phonenumber;

    return Account;
  }

  AnnualClick(num) {
    this.BillingType = num;
    this.job.BillingType = 4;
  }
  HourlyClick(num) {
    this.BillingType = num;
    this.job.BillingType = 1;
  }
  RemoteTypeClick(event) {
    if (event.checked) {
      this.RemoteType = true;
      this.job.JobLocationType = "Remote";
    } else {
      this.RemoteType = false;
      this.job.JobLocationType = null;
    }

  }


  public onInputKeyPress(event): void {
    const pattern = /[0-9\ ]/;
    let inputChar = String.fromCharCode(event.charCode);
    if (event.code !== 'Backspace' && event.code !== 'Tab' &&
      event.code !== 'ArrowLeft' && event.code !== 'ArrowRight') {
      if (!pattern.test(inputChar)) {
        event.preventDefault();
      }
    }
  }
  private DeepCopyForObject(source) {
    return JSON.parse(JSON.stringify(source));
  }

  getAssignAddress(event) {
    this.IsPageDirty = true;
    let data = event.address_components
    this.job.Location = "";
    this.job.City = "";
    this.job.State = "";

    if (data && data.length > 0) {
      for (let address of data) {
        if ((address.types.includes("sublocality") || (address.types.includes("locality")))) {
          this.job.City = address.long_name;
        }
        else if (address.types.includes("administrative_area_level_1")) {
          this.job.State = address.short_name;
        }
      }
      this.job.Location = this.job.City + ', ' + this.job.State;
      this.QuickSubmitForm.get('Location').setValue(this.job.Location);
      this.IsLocation = true;
      this.IsPageDirty=true;
    }
    else {
      this.job.Location = null;
      this.IsLocation = false;
    }
    if (!this.cdr["distroyed"]) {
      this.cdr.detectChanges();
    }
  }

  inputAssignAddress(event) {
    this.getAssignAddress(event.target.value);
  }

  private checkAccountName(accountLayer) {
    accountLayer.forEach(element => {
      if (this.accountMaster.findIndex(x => x.AccountName.toLocaleLowerCase() === element.AccountName.toLocaleLowerCase()) === -1) {
        element.AccountID = 0;
        element.CreatedDate = new Date();
      }
    })
    return accountLayer;
  }
  
  optionClick() {
    let newStatus = true;
    this.wpselect.options.forEach((item: MatOption) => {
      if (!item.selected) {
        newStatus = false;
      }
    });
    this.allSelected = newStatus;
  }

  toggleAllSelection() {
    if (this.allSelected) {
      this.wpselect.options.forEach((item: MatOption) => item.select());
    } else {
      this.wpselect.options.forEach((item: MatOption) => item.deselect());
    }
  }

  onSalaryTypeChange(event) {
    // if (event.value == 1) {
    //   this.onRemoveSalaryTypeValidation();
    // } else
    //   this.SetSalaryTypeValidation();
  }

  onRemoveSalaryTypeValidation() {
    this.QuickSubmitForm.controls["MinSalary"].clearValidators();
    this.QuickSubmitForm.controls["MinSalary"].updateValueAndValidity();
    this.QuickSubmitForm.controls["MaxSalary"].clearValidators();
    this.QuickSubmitForm.controls["MaxSalary"].updateValueAndValidity();
  }
  SetSalaryTypeValidation() {
    this.QuickSubmitForm.controls["MinSalary"].setValidators(Validators.required);
    this.QuickSubmitForm.controls["MinSalary"].updateValueAndValidity();
    this.QuickSubmitForm.controls["MaxSalary"].setValidators(Validators.required);
    this.QuickSubmitForm.controls["MaxSalary"].updateValueAndValidity();
  }

  JobModeChange(event) {debugger;
    this.SelectedJobMode = event;
    this.job.JobLocationType = event;
    if(event.value!="Remote"){
      this.LocationRequired = true;
    }

    if (!this.cdr["distroyed"]) {
      this.cdr.detectChanges();
    }
  }

  onSelFunc(option: any) {
   this.job.POC = option.UserId;
  }

  GetBenchSubUsers() {
    this.jobService.getBenchSubUsers(this.loginUser.Company.Id)
      .subscribe(
        response => {
          this.salesTeam = response;
          this.filterUsers();
          this.GetAccounts();
        },
        error => {
          this._alertService.error(error);
        });
  }
  filterUsers() {
    this.salesTeam.sort((a, b) => {
      var valueA = a.FullName, valueB = b.FullName
      if (valueA < valueB)
        return -1
      if (valueA > valueB)
        return 1
      return 0
    });

    this.filteredOptions = this.ReviweAssigneeCtrl.valueChanges.pipe(startWith(''), map(val => this._usersfilter(val)));
  }
  private _usersfilter(value: string): any[] {
    const filterValue = value.toLowerCase();
    return this.salesTeam.filter(option => option.FullName.toLowerCase().indexOf(value.toLowerCase()) === 0);
  }

  validateOption(control: FormControl) {
    const selectedOption = control.value;
    if (this.salesTeam) {
      const isValidOption = this.salesTeam.findIndex(x => x.FullName == selectedOption);
      return isValidOption != -1 ? null : { 'invalidAutocompleteString': { value: control.value } };
    }

  }

  ChangeAutoGenerate(event){
    if(event.checked==true){
      this.IsJobIdReadonly=true;
      this.job.UniqueJobId = Math.floor(100000 * Math.random()).toString();
    }
    else{
      this.IsJobIdReadonly=false;
      this.job.UniqueJobId="";
    }
  }

  EditorCreated(event: any) {

    //event.root.innerHTML = this.job.JobDescription;
    //event.root.innerHTML = event.value;
  }

  contentChanged(obj: any) {
    this.job.JobDescription = obj.html;
    //localStorage.setItem('html', obj.html);
  }

  OnsalaryRangeTypeChanged(){
   if(this.salaryRangeType==2){
     this.job.MinSalary = '$0';
   }
  }


  onTabChanged(event: MatTabChangeEvent) {
    if (event.index === 0) {
      this.isSummary = true;
      this.isApplicantsView = false;
      this.IsNotes=false;
    } else if (event.index === 1) {
      this.isSummary = false;
      this.isApplicantsView = true;
      this.IsNotes=true;
    }
    

    if (!this.cdr["distroyed"]) {
      this.cdr.detectChanges();
    }
  }

  MapJobToRequistion(CurrentJobId:number) {
    const RequisitionMapping = {
      JobId:CurrentJobId,
      RequisitionId: this.InputData.RequisitionId,
      MappingStatus: true,
      CreatedBy: this.loginUser.UserId,
      UpdatedBy: this.loginUser.UserId,
      CompanyId: this.loginUser.Company.Id
    }
    this.requisitonService.JobRequisitonMapping(RequisitionMapping)
      .subscribe(response => {
        if (!response.IsError) {
        }
      },
        error => {
          this._alertService.error(error);

        })
  }

  UpdateMultipleResponseMapping(CurrentJobId:number){
    if(this.InputData.responses.length > 0){
      this.MultipleRequisitions.forEach(element => {
        const ReqMapping = {
          JobId: CurrentJobId,
          RequisitionId:element.RequisitionId,
          MappingStatus: true,
          CreatedBy: this.loginUser.UserId,
          UpdatedBy: this.loginUser.UserId,
          CompanyId: this.loginUser.Company.Id
        };
        this.MappingList.push(ReqMapping);
      });

      this.requisitonService.JobRequisitonMultipleMapping(this.MappingList)
      .subscribe(response => {
        if (!response.IsError) {
          EmitterService.get("UpdateRequisitionMapping").emit(true);
        }
        else {
          this._alertService.error(response.ErrorMessage);
        }
      },
        error => {
          this._alertService.error(error);
        })

    }
  }

  OnContractTypeChanged(event:MatCheckboxChange,itemValue:string){debugger;

    if (itemValue == "C2C" && event.checked == true) {
      this.selectedCheckboxes.push('C2C');
    } else if (itemValue == "C2C" && event.checked == false) {
      const index = this.selectedCheckboxes.indexOf(itemValue);
      if (index !== -1) {
        this.selectedCheckboxes.splice(index, 1);
      }
    }

    if (itemValue=="W2" && event.checked==true) {
      this.selectedCheckboxes.push('W2');
    }
    else if (itemValue == "W2" && event.checked == false) {
      const index = this.selectedCheckboxes.indexOf(itemValue);
      if (index !== -1) {
        this.selectedCheckboxes.splice(index, 1);
      }
    }

    if (itemValue=="CTH" && event.checked==true) {
      this.selectedCheckboxes.push('CTH');
    }
    else if (itemValue == "CTH" && event.checked == false) {
      const index = this.selectedCheckboxes.indexOf(itemValue);
      if (index !== -1) {
        this.selectedCheckboxes.splice(index, 1);
      }
    }

    if(this.selectedCheckboxes.length > 0){
      this.QuickSubmitForm.get('JcType').setValue(this.selectedCheckboxes);
    }
    else{
      this.QuickSubmitForm.get('JcType').setValue(null);
    }
    this.IsPageDirty = true;
  }

  GetPrimarySkills(event) {debugger;
    this.SelectedPrimarySkills = event;
    this.QuickSubmitForm.markAsDirty();
    this.IsPageDirty = true;
    this.QuickSubmitForm.get('PrimarySkills').setValue(this.SelectedPrimarySkills);
    if (!this.cdr["distroyed"]) {
      this.cdr.detectChanges();
    }
  }

  checkJobTypeId(){
    return (control: AbstractControl): { [key: string]: any } | null => {
      if (this.SelectedType == 2 && !control.value) {
        return { JoBTypeId: true };
      }
      return null;
    };
  }

  checkJobType_Contract(){
    return (control: AbstractControl): { [key: string]: any } | null => {
      if (this.SelectedType == 3 && !control.value) {
        return { JcType: true };
      }
      return null;
    };
  }

  checkLocationRequired() {
    return (control: AbstractControl): { [key: string]: any } | null => {
      if (this.SelectedJobMode !== 'Remote' && !control.value) {
        return { locationRequired: true };
      }
      return null;
    };
  }

  public findInvalidControls() {debugger;
    const invalid = [];
    const controls = this.QuickSubmitForm.controls;
    for (const name in controls) {
        if (controls[name].invalid) {
            invalid.push(name);
        }
    }

    console.log(invalid);
  
    return invalid;
  }

  inputType = 'password';

  
}
